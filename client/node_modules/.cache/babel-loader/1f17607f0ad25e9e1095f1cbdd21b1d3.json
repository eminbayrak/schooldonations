{"ast":null,"code":"var _jsxFileName = \"/Users/eminbayrak/projects/nav360/client/src/components/Charts/DonationsChart.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState } from 'react';\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineMarkSeries, HexbinSeries, ChartLabel, VerticalBarSeries, LineSeries, Highlight, VerticalRectSeries, Treemap, Sunburst, AreaSeries, DiscreteColorLegend } from 'react-vis';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function DonationsChart() {\n  return /*#__PURE__*/_jsxDEV(XYPlot, {\n    width: 300,\n    height: 300,\n    children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n      style: {\n        strokeWidth: '3px',\n        line: {\n          stroke: 'red'\n        },\n        ticks: {\n          stroke: 'green'\n        },\n        title: {\n          textTransform: 'uppercase'\n        },\n        text: {\n          stroke: 'none',\n          fill: 'blue',\n          fontWeight: 600\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n      style: {\n        strokeWidth: '3px',\n        line: {\n          stroke: 'purple'\n        },\n        ticks: {\n          stroke: 'orange'\n        },\n        title: {\n          textTransform: 'capitalize'\n        },\n        text: {\n          stroke: 'none',\n          fill: 'rgb(70%, 80%, 54%)',\n          fontWeight: 600\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LineMarkSeries, {\n      className: \"linemark-series-example\",\n      style: {\n        strokeWidth: '3px'\n      },\n      lineStyle: {\n        stroke: 'red'\n      },\n      markStyle: {\n        stroke: 'blue'\n      },\n      data: [{\n        x: 1,\n        y: 10\n      }, {\n        x: 2,\n        y: 5\n      }, {\n        x: 3,\n        y: 15\n      }],\n      strokeWidth: 3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LineMarkSeries, {\n      className: \"linemark-series-example-2\",\n      curve: 'curveMonotoneX',\n      data: [{\n        x: 1,\n        y: 11\n      }, {\n        x: 1.5,\n        y: 29\n      }, {\n        x: 3,\n        y: 7\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n_c = DonationsChart;\nconst DATA = [];\nconst DIMENSIONS = ['economy (mpg)', 'cylinders', 'displacement (cc)', 'power (hp)', 'weight (lb)', '0-60 mph (s)', 'year'];\nexport class HexbinSizeExample extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      xAxis: 0,\n      yAxis: 3\n    };\n  }\n\n  render() {\n    const {\n      xAxis,\n      yAxis\n    } = this.state;\n    const data = DATA.map(d => ({\n      x: Number(d[DIMENSIONS[xAxis]]),\n      y: Number(d[DIMENSIONS[yAxis]])\n    }));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered-and-flexed\",\n      children: /*#__PURE__*/_jsxDEV(XYPlot, {\n        width: 500,\n        height: 300,\n        margin: 50,\n        children: [/*#__PURE__*/_jsxDEV(HexbinSeries, {\n          animation: true,\n          sizeHexagonsWithCount: true,\n          className: \"hexbin-size-example\",\n          radius: 15,\n          data: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ChartLabel, {\n          text: DIMENSIONS[xAxis],\n          className: \"alt-x-label\",\n          xPercent: 0.9,\n          yPercent: 0.65,\n          style: {\n            transform: 'rotate(90)',\n            textAnchor: 'end'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ChartLabel, {\n          text: DIMENSIONS[yAxis],\n          className: \"alt-y-label\",\n          xPercent: 0.1,\n          yPercent: 0.0,\n          style: {\n            textAnchor: 'start'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport class BarSeriesExample extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      xAxis: 0,\n      yAxis: 3\n    };\n  }\n\n  render() {\n    const {\n      xAxis,\n      yAxis\n    } = this.state;\n    const data = DATA.map(d => ({\n      x: Number(d[DIMENSIONS[xAxis]]),\n      y: Number(d[DIMENSIONS[yAxis]])\n    }));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered-and-flexed\",\n      children: /*#__PURE__*/_jsxDEV(XYPlot, {\n        xType: \"ordinal\",\n        width: 250,\n        height: 250,\n        colorType: 'literal',\n        style: {\n          fill: '#ffffff',\n          height: '300px'\n        },\n        margin: {\n          left: 0,\n          top: 25\n        },\n        children: [/*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(VerticalBarSeries, {\n          data: data,\n          stroke: 0,\n          barWidth: 1.0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport class HighlightExample extends Component {\n  render() {\n    const data = [{\n      x: 0,\n      y: 8\n    }, {\n      x: 1,\n      y: 5\n    }, {\n      x: 2,\n      y: 4\n    }, {\n      x: 3,\n      y: 9\n    }, {\n      x: 4,\n      y: 1\n    }];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"highlight-example\",\n      children: /*#__PURE__*/_jsxDEV(XYPlot, {\n        height: 300,\n        width: 300,\n        children: [/*#__PURE__*/_jsxDEV(LineSeries, {\n          data: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Highlight, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport const HighlightDragExample = () => {\n  _s();\n\n  const data = [{\n    x0: 0,\n    x: 1,\n    y0: 0,\n    y: 1\n  }, {\n    x0: 1,\n    x: 2,\n    y0: 0,\n    y: 2\n  }, {\n    x0: 2,\n    x: 3,\n    y0: 0,\n    y: 10\n  }, {\n    x0: 3,\n    x: 4,\n    y0: 0,\n    y: 6\n  }, {\n    x0: 4,\n    x: 5,\n    y0: 0,\n    y: 5\n  }, {\n    x0: 5,\n    x: 6,\n    y0: 0,\n    y: 3\n  }, {\n    x0: 6,\n    x: 7,\n    y0: 0,\n    y: 1\n  }];\n  const [selection, setSelection] = useState(null);\n\n  const updateDragState = area => {\n    if (!area || area.left === undefined || area.right === undefined) {\n      setSelection(null);\n    } else {\n      setSelection({\n        start: area.left,\n        end: area.right\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(XYPlot, {\n    width: 500,\n    height: 300,\n    children: [/*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(VerticalRectSeries, {\n      className: \"highlight-drag-example\",\n      data: data,\n      stroke: \"white\",\n      colorType: \"literal\",\n      getColor: d => {\n        if (!selection) {\n          return '#1E96BE';\n        }\n\n        const inX = d.x >= selection.start && d.x <= selection.end;\n        const inX0 = d.x0 >= selection.start && d.x0 <= selection.end;\n        const inStart = selection.start >= d.x0 && selection.start <= d.x;\n        const inEnd = selection.end >= d.x0 && selection.end <= d.x;\n        return inStart || inEnd || inX || inX0 ? '#12939A' : '#1E96BE';\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Highlight, {\n      color: \"#829AE3\",\n      drag: true,\n      enableY: false,\n      onDrag: updateDragState,\n      onDragEnd: updateDragState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 9\n  }, this);\n};\n\n_s(HighlightDragExample, \"1pe2rYmpSZi2ACCkz1yvMouAGOM=\");\n\n_c2 = HighlightDragExample;\nconst treemapData = {\n  title: 'first level',\n  children: [{\n    title: 'second level',\n    children: [{\n      title: '#ff0000',\n      size: 29,\n      children: [{\n        title: 'third level',\n        size: 30\n      }]\n    }]\n  }]\n};\nexport function TreemapExample() {\n  return /*#__PURE__*/_jsxDEV(Treemap, {\n    data: treemapData,\n    mode: 'partition',\n    height: 150,\n    width: 150\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 12\n  }, this);\n}\n_c3 = TreemapExample;\nexport function SunburstExample() {\n  return /*#__PURE__*/_jsxDEV(Sunburst, {\n    data: treemapData,\n    mode: 'partition',\n    height: 150,\n    width: 150\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 270,\n    columnNumber: 12\n  }, this);\n}\n_c4 = SunburstExample;\nexport function AreaSeriesExample() {\n  return /*#__PURE__*/_jsxDEV(AreaSeries, {\n    className: \"area-series-example\",\n    curve: 'curveMonotoneX',\n    data: [{\n      x: 1,\n      y: 11\n    }, {\n      x: 1.5,\n      y: 29\n    }, {\n      x: 3,\n      y: 7\n    }]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 9\n  }, this);\n}\n_c5 = AreaSeriesExample;\nexport function DiscreteColorLegendExample() {\n  return /*#__PURE__*/_jsxDEV(DiscreteColorLegend, {\n    className: \"discrete-color-legend-example\",\n    orientation: \"horizontal\",\n    items: [{\n      title: 'title',\n      color: '#ffffff',\n      strokeDasharray: '10, 10',\n      strokeWidth: 1\n    }]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 9\n  }, this);\n}\n_c6 = DiscreteColorLegendExample;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"DonationsChart\");\n$RefreshReg$(_c2, \"HighlightDragExample\");\n$RefreshReg$(_c3, \"TreemapExample\");\n$RefreshReg$(_c4, \"SunburstExample\");\n$RefreshReg$(_c5, \"AreaSeriesExample\");\n$RefreshReg$(_c6, \"DiscreteColorLegendExample\");","map":{"version":3,"sources":["/Users/eminbayrak/projects/nav360/client/src/components/Charts/DonationsChart.tsx"],"names":["React","Component","useState","XYPlot","XAxis","YAxis","VerticalGridLines","HorizontalGridLines","LineMarkSeries","HexbinSeries","ChartLabel","VerticalBarSeries","LineSeries","Highlight","VerticalRectSeries","Treemap","Sunburst","AreaSeries","DiscreteColorLegend","DonationsChart","strokeWidth","line","stroke","ticks","title","textTransform","text","fill","fontWeight","x","y","DATA","DIMENSIONS","HexbinSizeExample","state","xAxis","yAxis","render","data","map","d","Number","transform","textAnchor","BarSeriesExample","height","left","top","HighlightExample","HighlightDragExample","x0","y0","selection","setSelection","updateDragState","area","undefined","right","start","end","inX","inX0","inStart","inEnd","treemapData","children","size","TreemapExample","SunburstExample","AreaSeriesExample","DiscreteColorLegendExample","color","strokeDasharray"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react';\n\nimport {\n    XYPlot,\n    XAxis,\n    YAxis,\n    VerticalGridLines,\n    HorizontalGridLines,\n    LineMarkSeries,\n    HexbinSeries,\n    ChartLabel,\n    VerticalBarSeries,\n    LineSeries,\n    Highlight,\n    HighlightArea,\n    VerticalRectSeries,\n    Treemap,\n    Sunburst,\n    AreaSeries,\n    DiscreteColorLegend,\n} from 'react-vis';\n\nexport function DonationsChart() {\n    return (\n        <XYPlot width={300} height={300}>\n            <VerticalGridLines />\n            <HorizontalGridLines />\n            <XAxis\n                style={{\n                    strokeWidth: '3px',\n                    line: { stroke: 'red' },\n                    ticks: { stroke: 'green' },\n                    title: { textTransform: 'uppercase' },\n                    text: {\n                        stroke: 'none',\n                        fill: 'blue',\n                        fontWeight: 600,\n                    },\n                }}\n            />\n            <YAxis\n                style={{\n                    strokeWidth: '3px',\n                    line: { stroke: 'purple' },\n                    ticks: { stroke: 'orange' },\n                    title: { textTransform: 'capitalize' },\n                    text: {\n                        stroke: 'none',\n                        fill: 'rgb(70%, 80%, 54%)',\n                        fontWeight: 600,\n                    },\n                }}\n            />\n            <LineMarkSeries\n                className=\"linemark-series-example\"\n                style={{\n                    strokeWidth: '3px',\n                }}\n                lineStyle={{ stroke: 'red' }}\n                markStyle={{ stroke: 'blue' }}\n                data={[\n                    { x: 1, y: 10 },\n                    { x: 2, y: 5 },\n                    { x: 3, y: 15 },\n                ]}\n                strokeWidth={3}\n            />\n            <LineMarkSeries\n                className=\"linemark-series-example-2\"\n                curve={'curveMonotoneX'}\n                data={[\n                    { x: 1, y: 11 },\n                    { x: 1.5, y: 29 },\n                    { x: 3, y: 7 },\n                ]}\n            />\n        </XYPlot>\n    );\n}\n\nconst DATA: any[] = [];\n\nconst DIMENSIONS = [\n    'economy (mpg)',\n    'cylinders',\n    'displacement (cc)',\n    'power (hp)',\n    'weight (lb)',\n    '0-60 mph (s)',\n    'year',\n];\n\nexport class HexbinSizeExample extends Component {\n    state = {\n        xAxis: 0,\n        yAxis: 3,\n    };\n\n    render() {\n        const { xAxis, yAxis } = this.state;\n        const data = DATA.map((d: any) => ({\n            x: Number(d[DIMENSIONS[xAxis]]),\n            y: Number(d[DIMENSIONS[yAxis]]),\n        }));\n\n        return (\n            <div className=\"centered-and-flexed\">\n                <XYPlot width={500} height={300} margin={50}>\n                    <HexbinSeries\n                        animation\n                        sizeHexagonsWithCount\n                        className=\"hexbin-size-example\"\n                        radius={15}\n                        data={data}\n                    />\n                    <XAxis />\n                    <YAxis />\n                    <ChartLabel\n                        text={DIMENSIONS[xAxis]}\n                        className=\"alt-x-label\"\n                        xPercent={0.9}\n                        yPercent={0.65}\n                        style={{\n                            transform: 'rotate(90)',\n                            textAnchor: 'end',\n                        }}\n                    />\n\n                    <ChartLabel\n                        text={DIMENSIONS[yAxis]}\n                        className=\"alt-y-label\"\n                        xPercent={0.1}\n                        yPercent={0.0}\n                        style={{\n                            textAnchor: 'start',\n                        }}\n                    />\n                </XYPlot>\n            </div>\n        );\n    }\n}\n\nexport class BarSeriesExample extends Component {\n    state = {\n        xAxis: 0,\n        yAxis: 3,\n    };\n\n    render() {\n        const { xAxis, yAxis } = this.state;\n        const data = DATA.map((d: any) => ({\n            x: Number(d[DIMENSIONS[xAxis]]),\n            y: Number(d[DIMENSIONS[yAxis]]),\n        }));\n\n        return (\n            <div className=\"centered-and-flexed\">\n                <XYPlot\n                    xType=\"ordinal\"\n                    width={250}\n                    height={250}\n                    colorType={'literal'}\n                    style={{ fill: '#ffffff', height: '300px' }}\n                    margin={{ left: 0, top: 25 }}\n                >\n                    <XAxis />\n                    <VerticalBarSeries data={data} stroke={0} barWidth={1.0} />\n                </XYPlot>\n            </div>\n        );\n    }\n}\n\nexport class HighlightExample extends Component {\n    render() {\n        const data = [\n            { x: 0, y: 8 },\n            { x: 1, y: 5 },\n            { x: 2, y: 4 },\n            { x: 3, y: 9 },\n            { x: 4, y: 1 },\n        ];\n        return (\n            <div className=\"highlight-example\">\n                <XYPlot height={300} width={300}>\n                    <LineSeries data={data} />\n                    <Highlight />\n                </XYPlot>\n            </div>\n        );\n    }\n}\n\nexport const HighlightDragExample: React.FC = () => {\n    const data = [\n        { x0: 0, x: 1, y0: 0, y: 1 },\n        { x0: 1, x: 2, y0: 0, y: 2 },\n        { x0: 2, x: 3, y0: 0, y: 10 },\n        { x0: 3, x: 4, y0: 0, y: 6 },\n        { x0: 4, x: 5, y0: 0, y: 5 },\n        { x0: 5, x: 6, y0: 0, y: 3 },\n        { x0: 6, x: 7, y0: 0, y: 1 },\n    ];\n\n    const [selection, setSelection] = useState<{\n        start: number;\n        end: number;\n    } | null>(null);\n\n    const updateDragState = (area: HighlightArea | null) => {\n        if (!area || area.left === undefined || area.right === undefined) {\n            setSelection(null);\n        } else {\n            setSelection({ start: area.left, end: area.right });\n        }\n    };\n    return (\n        <XYPlot width={500} height={300}>\n            <XAxis />\n            <YAxis />\n            <VerticalRectSeries\n                className=\"highlight-drag-example\"\n                data={data}\n                stroke=\"white\"\n                colorType=\"literal\"\n                getColor={d => {\n                    if (!selection) {\n                        return '#1E96BE';\n                    }\n                    const inX = d.x >= selection.start && d.x <= selection.end;\n                    const inX0 = d.x0 >= selection.start && d.x0 <= selection.end;\n                    const inStart = selection.start >= d.x0 && selection.start <= d.x;\n                    const inEnd = selection.end >= d.x0 && selection.end <= d.x;\n\n                    return inStart || inEnd || inX || inX0 ? '#12939A' : '#1E96BE';\n                }}\n            />\n            <Highlight color=\"#829AE3\" drag enableY={false} onDrag={updateDragState} onDragEnd={updateDragState} />\n        </XYPlot>\n    );\n};\n\nconst treemapData = {\n    title: 'first level',\n    children: [\n        {\n            title: 'second level',\n            children: [\n                {\n                    title: '#ff0000',\n                    size: 29,\n                    children: [\n                        {\n                            title: 'third level',\n                            size: 30,\n                        },\n                    ],\n                },\n            ],\n        },\n    ],\n};\n\nexport function TreemapExample(): JSX.Element {\n    return <Treemap data={treemapData} mode={'partition'} height={150} width={150} />;\n}\n\nexport function SunburstExample(): JSX.Element {\n    return <Sunburst data={treemapData} mode={'partition'} height={150} width={150} />;\n}\n\nexport function AreaSeriesExample(): JSX.Element {\n    return (\n        <AreaSeries\n            className=\"area-series-example\"\n            curve={'curveMonotoneX'}\n            data={[\n                { x: 1, y: 11 },\n                { x: 1.5, y: 29 },\n                { x: 3, y: 7 },\n            ]}\n        />\n    );\n}\n\nexport function DiscreteColorLegendExample(): JSX.Element {\n    return (\n        <DiscreteColorLegend\n            className=\"discrete-color-legend-example\"\n            orientation=\"horizontal\"\n            items={[\n                {\n                    title: 'title',\n                    color: '#ffffff',\n                    strokeDasharray: '10, 10',\n                    strokeWidth: 1,\n                },\n            ]}\n        />\n    );\n}"]},"metadata":{},"sourceType":"module"}